import * as React from "react"
import { addPropertyControls, ControlType } from "framer"
import * as Head from "./parts/head"
import * as Objects from "./parts/objects"
import * as Body from "./parts/body"
import * as Scene from "./parts/scene"
import * as Sitting from "./parts/sitting"
import * as Standing from "./parts/standing"

function setViewBox(isStanding) {
    const height = isStanding ? 480 : 400

    return `0 0 ${380} ${height}`
}

export function Humaaans(props) {
    const {
        headSelection,
        isStanding,
        sittingSelection,
        standingSelection,
        bodySelection,
        width,
        skin,
        hair,
        direction,
        onClick,
        onMouseEnter,
        onMouseLeave,
    } = props

    const HeadElement = Head[headSelection]
    const BottomElement = isStanding
        ? Standing[standingSelection]
        : Sitting[sittingSelection]

    const BodyElement = Body[bodySelection]

    const viewBox = setViewBox(isStanding)

    return (
        <div
            {...{ onClick, onMouseEnter, onMouseLeave }}
            style={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                width: "100%",
                height: "100%",
                overflow: "hidden",
                transform: direction ? "scaleX(-1)" : "",
            }}
        >
            <svg
                height={"100%"}
                width={width}
                version="1.1"
                viewBox={viewBox}
                xmlns="http://www.w3.org/2000/svg"
            >
                <g id="head" transform="translate(82.000000, 0.000000)">
                    <HeadElement skin={skin} hair={hair} />
                </g>
                <g id="bottom" transform="translate(0.000000, 187.000000)">
                    <BottomElement skin={skin} />
                </g>
                <g id="torso" transform="translate(22.000000, 82.000000)">
                    <BodyElement skin={skin} />
                </g>
            </svg>
        </div>
    )
}

Humaaans.defaultProps = {
    width: 200,
    height: 240,
    iconSelection: "PlusCircleOutline",
    iconSearch: "PlusCircleOutline",
    color: "#09F",
    selectByList: true,
    headSelection: Object.keys(Head)[0],
    bodySelection: Object.keys(Body)[0],
    sittingSelection: Object.keys(Sitting)[0],
    standingSelection: Object.keys(Standing)[0],
    direction: false,
    skin: "#B28B67",
    hair: "#191847",
    isStanding: false,
}

Humaaans.displayName = "Illustration"

enum Illustrations {
    object = "Object",
    scene = "Scene",
    human = "Human",
}

addPropertyControls(Humaaans, {
    // illustration: {
    //     type: ControlType.Enum,

    //     displaySegmentedControl: true,
    //     options: [Illustrations.human, Illustrations.scene],
    // },
    headSelection: {
        type: ControlType.Enum,
        options: Object.keys(Head).filter((k) => !k.includes("info")),
        defaultValue: Humaaans.defaultProps.iconSelection,
        title: "Head",
    },
    bodySelection: {
        type: ControlType.Enum,
        options: Object.keys(Body).filter((k) => !k.includes("info")),
        defaultValue: Humaaans.defaultProps.iconSelection,
        title: "Torso",
    },

    sittingSelection: {
        type: ControlType.Enum,
        options: Object.keys(Sitting).filter((k) => !k.includes("info")),
        defaultValue: Humaaans.defaultProps.iconSelection,
        title: "Bottom",
        hidden: ({ isStanding }) => isStanding,
    },
    standingSelection: {
        type: ControlType.Enum,
        options: Object.keys(Standing).filter((k) => !k.includes("info")),
        defaultValue: Humaaans.defaultProps.iconSelection,
        title: "Bottom",
        hidden: ({ isStanding }) => !isStanding,
    },

    isStanding: {
        type: ControlType.Boolean,
        title: "Stance",
        enabledTitle: "Standing",
        disabledTitle: "Sitting",
    },
    direction: {
        type: ControlType.Boolean,
        title: "Direction",
        enabledTitle: "Left",
        disabledTitle: "Right",
    },
    // color: { type: ControlType.Color, title: "Color" },
    skin: { type: ControlType.Color, title: "Skin" },
    hair: {
        type: ControlType.Color,
        title: "Hair",
        hidden: ({ headSelection }) =>
            headSelection === "NoHair" ||
            headSelection === "Hijab" ||
            headSelection === "Hijab2" ||
            headSelection === "Turban" ||
            headSelection === "Turban2",
    },
    onClick: {
        type: ControlType.EventHandler,
    },
    onMouseEnter: {
        type: ControlType.EventHandler,
    },
    onMouseLeave: {
        type: ControlType.EventHandler,
    },
})
